package cn.nikeo.reparatur.bytecodewriter

import org.objectweb.asm.*
import java.io.InputStream

fun write(classFileInputStream: InputStream, className: String): ByteArray {
    val cr = ClassReader(classFileInputStream)
    val cw = ClassWriter(ClassWriter.COMPUTE_MAXS)

    cr.accept(MyClassVisitor(cw, className), ClassReader.EXPAND_FRAMES)
    return cw.toByteArray()
}

private class MyClassVisitor(classWriter: ClassWriter, private val className: String) :
    ClassVisitor(Opcodes.ASM6, classWriter) {

    init {
        classWriter.generateFixingMethod()
    }

    private fun ClassWriter.generateFixingMethod() {
        visitInnerClass(
            "android/os/Build\$VERSION",
            "android/os/Build",
            "VERSION",
            Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC
        );
        visitInnerClass(
            "android/os/Build\$VERSION_CODES",
            "android/os/Build",
            "VERSION_CODES",
            Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC
        );

        val mv = visitMethod(
            Opcodes.ACC_PRIVATE + Opcodes.ACC_STATIC,
            FIX_METHOD_NAME,
            "(Landroid/content/Context;)Landroid/content/Context;",
            null,
            null
        )
        mv.visitCode()
        val l0 = Label()
        mv.visitLabel(l0)
        mv.visitLineNumber(9, l0)
        mv.visitFieldInsn(Opcodes.GETSTATIC, "android/os/Build\$VERSION", "SDK_INT", "I")
        mv.visitIntInsn(Opcodes.BIPUSH, 21)
        val l1 = Label()
        mv.visitJumpInsn(Opcodes.IF_ICMPLT, l1)
        mv.visitFieldInsn(Opcodes.GETSTATIC, "android/os/Build\$VERSION", "SDK_INT", "I")
        mv.visitIntInsn(Opcodes.BIPUSH, 23)
        mv.visitJumpInsn(Opcodes.IF_ICMPGE, l1)
        val l2 = Label()
        mv.visitLabel(l2)
        mv.visitLineNumber(10, l2)
        mv.visitVarInsn(Opcodes.ALOAD, 0)
        mv.visitTypeInsn(Opcodes.NEW, "android/content/res/Configuration")
        mv.visitInsn(Opcodes.DUP)
        mv.visitMethodInsn(
            Opcodes.INVOKESPECIAL,
            "android/content/res/Configuration",
            "<init>",
            "()V",
            false
        )
        mv.visitMethodInsn(
            Opcodes.INVOKEVIRTUAL,
            "android/content/Context",
            "createConfigurationContext",
            "(Landroid/content/res/Configuration;)Landroid/content/Context;",
            false
        )
        mv.visitInsn(Opcodes.ARETURN)
        mv.visitLabel(l1)
        mv.visitLineNumber(12, l1)
        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null)
        mv.visitVarInsn(Opcodes.ALOAD, 0)
        mv.visitInsn(Opcodes.ARETURN)
        val l3 = Label()
        mv.visitLabel(l3)
        mv.visitLocalVariable("context", "Landroid/content/Context;", null, l0, l3, 0)
        mv.visitMaxs(3, 1)
        mv.visitEnd()
    }

    override fun visitMethod(
        access: Int,
        name: String?,
        desc: String?,
        signature: String?,
        exceptions: Array<out String>?
    ): MethodVisitor {
        val mv = super.visitMethod(access, name, desc, signature, exceptions)
        if (mv != null && "<init>" == name) {
            return object : MethodVisitor(Opcodes.ASM5, mv) {
                override fun visitVarInsn(opcode: Int, `var`: Int) {
                    super.visitVarInsn(opcode, `var`)
                    if (opcode == Opcodes.ALOAD && `var` == 1) {
                        mv.visitMethodInsn(
                            Opcodes.INVOKESTATIC,
                            className,
                            FIX_METHOD_NAME,
                            "(Landroid/content/Context;)Landroid/content/Context;",
                            false
                        )
                    }
                }
            }
        }
        return mv
    }

    companion object {
        private const val FIX_METHOD_NAME = "_autoGeneratedFixMethodByGradlePlugin"
    }
}